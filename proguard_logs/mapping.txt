chan.android.game.memoblock.Cell -> chan.android.game.memoblock.a:
    int r -> a
    int c -> b
    boolean equals(chan.android.game.memoblock.Cell) -> a
    int hashCode() -> hashCode
chan.android.game.memoblock.Difficulty -> chan.android.game.memoblock.b:
    chan.android.game.memoblock.Difficulty EASY -> a
    chan.android.game.memoblock.Difficulty NORMAL -> b
    chan.android.game.memoblock.Difficulty DIFFICULT -> c
    chan.android.game.memoblock.Difficulty EXTREME -> d
    long delayTime -> e
    chan.android.game.memoblock.Difficulty[] $VALUES -> f
    chan.android.game.memoblock.Difficulty[] values() -> values
    chan.android.game.memoblock.Difficulty valueOf(java.lang.String) -> valueOf
    long getDelayTime() -> a
    chan.android.game.memoblock.Difficulty getEnum(long) -> a
    java.lang.String toString() -> toString
chan.android.game.memoblock.GameActivity -> chan.android.game.memoblock.GameActivity:
    java.text.SimpleDateFormat DATE_FORMATTER -> a
    android.widget.ViewFlipper viewFlipper -> b
    chan.android.game.memoblock.PatternView patternView -> c
    chan.android.game.memoblock.PatternGrid patternGrid -> d
    chan.android.game.memoblock.ScoreBoxView currentScoreBoxView -> e
    chan.android.game.memoblock.ScoreBoxView bestScoreBoxView -> f
    android.widget.TextView moveCountTextView -> g
    int row -> h
    int column -> i
    int currentGameScore -> j
    chan.android.game.memoblock.generator.Generatable nthGenerator -> k
    java.util.Random random -> l
    chan.android.game.memoblock.SoundManager soundManager -> m
    android.os.Vibrator vibrator -> n
    chan.android.game.memoblock.highscore.HighScoreDataSource highScoreDataSource -> o
    long showPatternTime -> p
    android.view.animation.AnimationSet slideInAnimation -> q
    long timerCount -> r
    android.os.CountDownTimer nextGameTimer -> s
    android.os.CountDownTimer removePatternTimer -> t
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    android.view.animation.AnimationSet buildAnimation(android.view.View) -> a
    void launchActivity(java.lang.Class) -> a
    void restart() -> a
    int pickRandom(int,int) -> a
    void startNewGame(int,int) -> b
    int nextRow() -> b
    int nextColumn() -> c
    void cancelTimer(android.os.CountDownTimer) -> a
    void onBackPressed() -> onBackPressed
    void showGameOverDialog(int) -> a
    void onMove(chan.android.game.memoblock.Cell) -> a
    void goToNextGame() -> d
    android.widget.ViewFlipper access$000(chan.android.game.memoblock.GameActivity) -> a
    void access$100(chan.android.game.memoblock.GameActivity) -> b
    void access$200(chan.android.game.memoblock.GameActivity,java.lang.Class) -> a
    long access$300(chan.android.game.memoblock.GameActivity) -> c
    chan.android.game.memoblock.PatternView access$400(chan.android.game.memoblock.GameActivity) -> d
    android.view.animation.AnimationSet access$500(chan.android.game.memoblock.GameActivity) -> e
    int access$600(chan.android.game.memoblock.GameActivity) -> f
    int access$700(chan.android.game.memoblock.GameActivity) -> g
    void access$800(chan.android.game.memoblock.GameActivity,int,int) -> a
chan.android.game.memoblock.GameActivity$1 -> chan.android.game.memoblock.c:
    chan.android.game.memoblock.GameActivity this$0 -> a
    void onClick(android.view.View) -> onClick
chan.android.game.memoblock.GameActivity$2 -> chan.android.game.memoblock.d:
    chan.android.game.memoblock.GameActivity this$0 -> a
    void onClick(android.view.View) -> onClick
chan.android.game.memoblock.GameActivity$3 -> chan.android.game.memoblock.e:
    chan.android.game.memoblock.GameActivity this$0 -> a
    void onClick(android.view.View) -> onClick
chan.android.game.memoblock.GameActivity$4 -> chan.android.game.memoblock.f:
    chan.android.game.memoblock.GameDialog val$d -> a
    chan.android.game.memoblock.GameActivity this$0 -> b
    void onLeftClick() -> a
    void onRightClick() -> b
chan.android.game.memoblock.GameActivity$NextGameTimer -> chan.android.game.memoblock.g:
    chan.android.game.memoblock.GameActivity this$0 -> a
    void onFinish() -> onFinish
    void onTick(long) -> onTick
chan.android.game.memoblock.GameActivity$RemovePatternTimer -> chan.android.game.memoblock.h:
    chan.android.game.memoblock.GameActivity this$0 -> a
    void onFinish() -> onFinish
    void onTick(long) -> onTick
chan.android.game.memoblock.GameDialog -> chan.android.game.memoblock.i:
    chan.android.game.memoblock.GameDialog$OnGameDialogClickListener listener -> a
    void setOnGameDialogClickListener(chan.android.game.memoblock.GameDialog$OnGameDialogClickListener) -> a
    chan.android.game.memoblock.GameDialog$OnGameDialogClickListener access$000(chan.android.game.memoblock.GameDialog) -> a
chan.android.game.memoblock.GameDialog$1 -> chan.android.game.memoblock.j:
    chan.android.game.memoblock.GameDialog this$0 -> a
    void onClick(android.view.View) -> onClick
chan.android.game.memoblock.GameDialog$2 -> chan.android.game.memoblock.k:
    chan.android.game.memoblock.GameDialog this$0 -> a
    void onClick(android.view.View) -> onClick
chan.android.game.memoblock.GameDialog$OnGameDialogClickListener -> chan.android.game.memoblock.l:
    void onLeftClick() -> a
    void onRightClick() -> b
chan.android.game.memoblock.GameSettings -> chan.android.game.memoblock.m:
    android.content.SharedPreferences prefs -> a
    void initialize(android.content.Context) -> a
    void persistNewestScoreDate(java.lang.String) -> a
    java.lang.String getNewestScoreDate() -> a
    void persistBestScore(int) -> a
    int getBestScore() -> b
    void persistEnableSound(boolean) -> a
    boolean isSoundEnabled() -> c
    void persistDifficulty(chan.android.game.memoblock.Difficulty) -> a
    chan.android.game.memoblock.Difficulty getDifficulty() -> d
chan.android.game.memoblock.GameSettings$Key -> chan.android.game.memoblock.n:
    chan.android.game.memoblock.GameSettings$Key ENABLE_SOUND -> a
    chan.android.game.memoblock.GameSettings$Key ENABLE_CLOCK -> b
    chan.android.game.memoblock.GameSettings$Key BEST_SCORE -> c
    chan.android.game.memoblock.GameSettings$Key DIFFICULTY -> d
    chan.android.game.memoblock.GameSettings$Key NEWEST_SCORE_DATE -> e
    chan.android.game.memoblock.GameSettings$Key[] $VALUES -> f
    chan.android.game.memoblock.GameSettings$Key[] values() -> values
    chan.android.game.memoblock.GameSettings$Key valueOf(java.lang.String) -> valueOf
chan.android.game.memoblock.MemoBlockApplication -> chan.android.game.memoblock.MemoBlockApplication:
    void onCreate() -> onCreate
chan.android.game.memoblock.MoveState -> chan.android.game.memoblock.o:
    chan.android.game.memoblock.MoveState NEUTRAL -> a
    chan.android.game.memoblock.MoveState LOST -> b
    chan.android.game.memoblock.MoveState WON -> c
    chan.android.game.memoblock.MoveState[] $VALUES -> d
    chan.android.game.memoblock.MoveState[] values() -> values
    chan.android.game.memoblock.MoveState valueOf(java.lang.String) -> valueOf
chan.android.game.memoblock.PatternGrid -> chan.android.game.memoblock.p:
    int row -> a
    int column -> b
    int[][] grid -> c
    chan.android.game.memoblock.generator.Generatable generator -> d
    int count -> e
    int score -> f
    void generate(chan.android.game.memoblock.generator.Generatable) -> a
    int getMarkedCount() -> a
    boolean isMarked(int,int) -> a
    boolean isMarkRemoved(int,int) -> b
    void removeMark(int,int) -> c
    int countRemoval() -> b
    boolean isValid(int,int) -> d
    int getRow() -> c
    int getColumn() -> d
    int getScore() -> e
chan.android.game.memoblock.PatternView -> chan.android.game.memoblock.PatternView:
    int thickness -> a
    float borderWidth -> b
    int gridLineColor -> c
    int backgroundColor -> d
    int markerColor -> e
    android.graphics.Paint gridLinePaint -> f
    android.graphics.Paint backgroundPaint -> g
    chan.android.game.memoblock.PatternView$OnMoveListener moveListener -> h
    chan.android.game.memoblock.Cell activeCell -> i
    chan.android.game.memoblock.MoveState moveState -> j
    chan.android.game.memoblock.PatternGrid patternGrid -> k
    android.graphics.Bitmap checkMarkBitmap -> o
    android.graphics.Bitmap crossMarkBitmap -> p
    boolean showPattern -> l
    boolean touchable -> m
    android.graphics.Paint rectPaint -> n
    android.graphics.Rect cachedRect -> q
    chan.android.game.memoblock.Cell cacheCell -> r
    int borderColor -> s
    int patternColor -> t
    int emptySquareColor -> u
    android.graphics.Rect originalBitmapSize -> v
    void setOnMoveListener(chan.android.game.memoblock.PatternView$OnMoveListener) -> setOnMoveListener
    void init() -> a
    chan.android.game.memoblock.Cell getTouchCell(android.view.MotionEvent) -> a
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawRect(android.graphics.Canvas,android.graphics.Rect,chan.android.game.memoblock.Cell) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onActionDown(android.view.MotionEvent) -> b
    void setPatternGrid(chan.android.game.memoblock.PatternGrid) -> setPatternGrid
    void setActiveCell(int,int,chan.android.game.memoblock.MoveState) -> a
    chan.android.game.memoblock.Cell getActiveCell() -> getActiveCell
    chan.android.game.memoblock.MoveState getMoveState() -> getMoveState
    void setTouchable(boolean) -> setTouchable
    void setShowPattern(boolean) -> setShowPattern
chan.android.game.memoblock.PatternView$OnMoveListener -> chan.android.game.memoblock.q:
    void onMove(chan.android.game.memoblock.Cell) -> a
chan.android.game.memoblock.R -> chan.android.game.memoblock.r:
chan.android.game.memoblock.R$styleable -> chan.android.game.memoblock.s:
    int[] PatternView -> PatternView
    int PatternView_background_color -> PatternView_background_color
    int PatternView_border_width -> PatternView_border_width
    int PatternView_grid_line_color -> PatternView_grid_line_color
    int PatternView_marker_color -> PatternView_marker_color
    int[] ScoreBoxView -> ScoreBoxView
    int ScoreBoxView_label_text -> ScoreBoxView_label_text
chan.android.game.memoblock.RoundedRectListView -> chan.android.game.memoblock.RoundedRectListView:
    android.graphics.Path clip -> a
    void init() -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
chan.android.game.memoblock.ScoreBoxView -> chan.android.game.memoblock.ScoreBoxView:
    int score -> a
    android.view.animation.Animation animation -> b
    android.widget.TextView textViewAnim -> c
    android.widget.TextView textViewLabel -> d
    android.widget.TextView textViewScore -> e
    int getScore() -> getScore
    void setScore(int) -> setScore
    void parseAttributes(android.content.Context,android.util.AttributeSet) -> a
    void addScore(int) -> a
    android.widget.TextView access$000(chan.android.game.memoblock.ScoreBoxView) -> a
chan.android.game.memoblock.ScoreBoxView$1 -> chan.android.game.memoblock.t:
    chan.android.game.memoblock.ScoreBoxView this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
chan.android.game.memoblock.SettingsActivity -> chan.android.game.memoblock.SettingsActivity:
    android.widget.CheckBox checkBoxSound -> a
    android.widget.Spinner spinnerBackground -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onBackPressed() -> onBackPressed
chan.android.game.memoblock.SettingsActivity$1 -> chan.android.game.memoblock.u:
    chan.android.game.memoblock.SettingsActivity$CustomArrayAdapter val$adapter -> a
    chan.android.game.memoblock.SettingsActivity this$0 -> b
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
chan.android.game.memoblock.SettingsActivity$CustomArrayAdapter -> chan.android.game.memoblock.v:
    java.util.List levels -> a
    android.content.Context context -> b
    int getCount() -> getCount
    chan.android.game.memoblock.Difficulty getItem(int) -> a
    long getItemId(int) -> getItemId
    int indexOf(chan.android.game.memoblock.Difficulty) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
chan.android.game.memoblock.SettingsActivity$CustomArrayAdapter$ViewHolder -> chan.android.game.memoblock.w:
    android.widget.TextView name -> a
chan.android.game.memoblock.SoundManager -> chan.android.game.memoblock.x:
    int win -> a
    int lose -> b
    int move -> c
    android.media.SoundPool soundPool -> d
    android.media.AudioManager audioManager -> e
    float volume -> f
    boolean isOn -> g
    void turnOn() -> a
    void turnOff() -> b
    void playWinSound() -> c
    void playLoseSound() -> d
    void playMoveSound() -> e
chan.android.game.memoblock.generator.Generatable -> chan.android.game.memoblock.a.a:
    int generate(int[][]) -> a
chan.android.game.memoblock.generator.NthRandomGenerator -> chan.android.game.memoblock.a.b:
    java.util.Random random -> a
    chan.android.game.memoblock.generator.NthRandomGenerator$Position[] positions -> b
    int blocks -> c
    void initializePositions(int,int) -> a
    void setNumberOfBlocks(int) -> a
    int generate(int[][]) -> a
    int random(int,int) -> b
    void pick(int) -> b
    void swap(int,int) -> c
chan.android.game.memoblock.generator.NthRandomGenerator$Position -> chan.android.game.memoblock.a.c:
    int x -> a
    int y -> b
chan.android.game.memoblock.generator.RandomGenerator -> chan.android.game.memoblock.a.d:
    int RANDOM_NUMBER -> a
    java.util.Random random -> b
    int generate(int[][]) -> a
chan.android.game.memoblock.highscore.HighScoreActivity -> chan.android.game.memoblock.highscore.HighScoreActivity:
    java.text.SimpleDateFormat DATE_FORMATTER -> a
    chan.android.game.memoblock.highscore.HighScoreActivity$HighScoreCursorAdapter cursorAdapter -> b
    chan.android.game.memoblock.highscore.HighScoreManager highScoreManager -> c
    void onCreate(android.os.Bundle) -> onCreate
    void confirmDelete(android.database.Cursor) -> a
    android.content.Loader onCreateLoader(int,android.os.Bundle) -> onCreateLoader
    void onLoadFinished(android.content.Loader,android.database.Cursor) -> a
    void onLoaderReset(android.content.Loader) -> onLoaderReset
    java.lang.String readableTimeStamp(java.lang.String) -> a
    void onLoadFinished(android.content.Loader,java.lang.Object) -> onLoadFinished
    chan.android.game.memoblock.highscore.HighScoreActivity$HighScoreCursorAdapter access$000(chan.android.game.memoblock.highscore.HighScoreActivity) -> a
    void access$100(chan.android.game.memoblock.highscore.HighScoreActivity,android.database.Cursor) -> a
    chan.android.game.memoblock.highscore.HighScoreManager access$200(chan.android.game.memoblock.highscore.HighScoreActivity) -> b
    java.lang.String access$300(chan.android.game.memoblock.highscore.HighScoreActivity,java.lang.String) -> a
chan.android.game.memoblock.highscore.HighScoreActivity$1 -> chan.android.game.memoblock.highscore.a:
    chan.android.game.memoblock.highscore.HighScoreActivity this$0 -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
chan.android.game.memoblock.highscore.HighScoreActivity$2 -> chan.android.game.memoblock.highscore.b:
    chan.android.game.memoblock.GameDialog val$d -> a
    java.lang.String val$date -> b
    chan.android.game.memoblock.highscore.HighScoreActivity this$0 -> c
    void onLeftClick() -> a
    void onRightClick() -> b
chan.android.game.memoblock.highscore.HighScoreActivity$HighScoreCursorAdapter -> chan.android.game.memoblock.highscore.c:
    android.view.LayoutInflater inflater -> b
    chan.android.game.memoblock.highscore.HighScoreActivity this$0 -> a
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
chan.android.game.memoblock.highscore.HighScoreActivity$ViewHolder -> chan.android.game.memoblock.highscore.d:
    android.widget.TextView score -> a
    android.widget.TextView date -> b
    android.widget.TextView level -> c
chan.android.game.memoblock.highscore.HighScoreContentProvider -> chan.android.game.memoblock.highscore.HighScoreContentProvider:
    android.net.Uri CONTENT_URI -> a
    android.content.UriMatcher URI_MATCHER -> c
    chan.android.game.memoblock.highscore.HighScoreDbHelper dbHelper -> d
    java.lang.String[] COLUMNS -> b
    void checkColumns(java.lang.String[]) -> a
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
chan.android.game.memoblock.highscore.HighScoreDataSource -> chan.android.game.memoblock.highscore.e:
    void insertNewScore(int,chan.android.game.memoblock.Difficulty) -> a
chan.android.game.memoblock.highscore.HighScoreDbHelper -> chan.android.game.memoblock.highscore.f:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
chan.android.game.memoblock.highscore.HighScoreDbTable -> chan.android.game.memoblock.highscore.g:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
chan.android.game.memoblock.highscore.HighScoreManager -> chan.android.game.memoblock.highscore.h:
    java.text.SimpleDateFormat DATE_FORMATTER -> a
    android.content.Context appContext -> b
    void insertNewScore(int,chan.android.game.memoblock.Difficulty) -> a
    boolean deleteScore(java.lang.String) -> a
